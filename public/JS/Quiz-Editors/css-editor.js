let editor;
let currentChallengeIndex = 0;

const challenges = [
  {
    title: "M√†u s·∫Øc v√† Font ch·ªØ c∆° b·∫£n",
    description: `
          <h3>Nhi·ªám v·ª•</h3>
          <p>T·∫°o CSS ƒë·ªÉ:</p>
          <ul style="margin-left: 20px; line-height: 1.8;">
            <li>ƒê·ªïi m√†u ch·ªØ c·ªßa <code>h1</code> th√†nh m√†u xanh d∆∞∆°ng (#007acc)</li>
            <li>ƒê·ªïi m√†u n·ªÅn c·ªßa <code>body</code> th√†nh m√†u x√°m nh·∫°t (#f5f5f5)</li>
            <li>ƒê·ªïi font ch·ªØ c·ªßa <code>p</code> th√†nh Arial</li>
          </ul>
          <div class="example-box">
            <strong>üí° G·ª£i √Ω:</strong><br>
            - D√πng thu·ªôc t√≠nh <code>color</code> ƒë·ªÉ ƒë·ªïi m√†u ch·ªØ<br>
            - D√πng <code>background-color</code> cho m√†u n·ªÅn<br>
            - D√πng <code>font-family</code> cho font ch·ªØ
          </div>
        `,
    starterCode: `/* Vi·∫øt CSS c·ªßa b·∫°n ·ªü ƒë√¢y */

`,
    htmlContent: `<h1>Ti√™u ƒë·ªÅ ch√≠nh</h1>
<p>ƒê√¢y l√† m·ªôt ƒëo·∫°n vƒÉn b·∫£n m·∫´u.</p>`,
    requirements: [
      {
        name: "h1 c√≥ m√†u xanh d∆∞∆°ng",
        check: (doc) => {
          const h1 = doc.querySelector("h1");
          if (!h1) return false;
          const color = window.getComputedStyle(h1).color;
          return color === "rgb(0, 122, 204)" || color.includes("0, 122, 204");
        },
      },
      {
        name: "body c√≥ m√†u n·ªÅn x√°m nh·∫°t",
        check: (doc) => {
          const body = doc.querySelector("body");
          if (!body) return false;
          const bg = window.getComputedStyle(body).backgroundColor;
          return bg === "rgb(245, 245, 245)" || bg.includes("245, 245, 245");
        },
      },
      {
        name: "p c√≥ font Arial",
        check: (doc) => {
          const p = doc.querySelector("p");
          if (!p) return false;
          const font = window.getComputedStyle(p).fontFamily.toLowerCase();
          return font.includes("arial");
        },
      },
    ],
  },
  {
    title: "Box Model - Padding v√† Margin",
    description: `
          <h3>Nhi·ªám v·ª•</h3>
          <p>T·∫°o CSS cho class <code>.box</code> v·ªõi:</p>
          <ul style="margin-left: 20px; line-height: 1.8;">
            <li>Padding b√™n trong l√† 20px</li>
            <li>Margin xung quanh l√† 10px</li>
            <li>Border m√†u ƒëen, ƒë·ªô d√†y 2px, ki·ªÉu solid</li>
            <li>M√†u n·ªÅn l√† m√†u v√†ng nh·∫°t (#fff3cd)</li>
          </ul>
          <div class="example-box">
            <strong>üí° G·ª£i √Ω:</strong><br>
            - D√πng <code>padding</code> cho kho·∫£ng c√°ch b√™n trong<br>
            - D√πng <code>margin</code> cho kho·∫£ng c√°ch b√™n ngo√†i<br>
            - D√πng <code>border</code> cho vi·ªÅn
          </div>
        `,
    starterCode: `.box {
  /* Vi·∫øt CSS c·ªßa b·∫°n ·ªü ƒë√¢y */
  
}`,
    htmlContent: `<div class="box">
  <h2>Box Model</h2>
  <p>ƒê√¢y l√† m·ªôt h·ªôp v·ªõi padding, margin v√† border.</p>
</div>`,
    requirements: [
      {
        name: ".box c√≥ padding 20px",
        check: (doc) => {
          const box = doc.querySelector(".box");
          if (!box) return false;
          const padding = window.getComputedStyle(box).padding;
          return padding === "20px" || padding.includes("20px");
        },
      },
      {
        name: ".box c√≥ margin 10px",
        check: (doc) => {
          const box = doc.querySelector(".box");
          if (!box) return false;
          const margin = window.getComputedStyle(box).margin;
          return margin === "10px" || margin.includes("10px");
        },
      },
      {
        name: ".box c√≥ border 2px solid",
        check: (doc) => {
          const box = doc.querySelector(".box");
          if (!box) return false;
          const style = window.getComputedStyle(box);
          return style.borderWidth === "2px" && style.borderStyle === "solid";
        },
      },
      {
        name: ".box c√≥ m√†u n·ªÅn v√†ng nh·∫°t",
        check: (doc) => {
          const box = doc.querySelector(".box");
          if (!box) return false;
          const bg = window.getComputedStyle(box).backgroundColor;
          return bg === "rgb(255, 243, 205)" || bg.includes("255, 243, 205");
        },
      },
    ],
  },
  {
    title: "Flexbox Layout",
    description: `
          <h3>Nhi·ªám v·ª•</h3>
          <p>T·∫°o CSS cho class <code>.container</code> ƒë·ªÉ:</p>
          <ul style="margin-left: 20px; line-height: 1.8;">
            <li>S·ª≠ d·ª•ng Flexbox layout</li>
            <li>CƒÉn gi·ªØa c√°c item theo c·∫£ 2 chi·ªÅu</li>
            <li>Kho·∫£ng c√°ch gi·ªØa c√°c item l√† 20px</li>
            <li>Chi·ªÅu cao t·ªëi thi·ªÉu l√† 300px</li>
          </ul>
          <div class="example-box">
            <strong>üí° G·ª£i √Ω:</strong><br>
            - D√πng <code>display: flex</code><br>
            - D√πng <code>justify-content</code> v√† <code>align-items</code><br>
            - D√πng <code>gap</code> cho kho·∫£ng c√°ch
          </div>
        `,
    starterCode: `.container {
  /* Vi·∫øt CSS c·ªßa b·∫°n ·ªü ƒë√¢y */
  
}

.item {
  padding: 20px;
  background: #4ec9b0;
  color: white;
  border-radius: 8px;
}`,
    htmlContent: `<div class="container">
  <div class="item">Item 1</div>
  <div class="item">Item 2</div>
  <div class="item">Item 3</div>
</div>`,
    requirements: [
      {
        name: ".container c√≥ display: flex",
        check: (doc) => {
          const container = doc.querySelector(".container");
          if (!container) return false;
          return window.getComputedStyle(container).display === "flex";
        },
      },
      {
        name: ".container c√≥ justify-content: center",
        check: (doc) => {
          const container = doc.querySelector(".container");
          if (!container) return false;
          return window.getComputedStyle(container).justifyContent === "center";
        },
      },
      {
        name: ".container c√≥ align-items: center",
        check: (doc) => {
          const container = doc.querySelector(".container");
          if (!container) return false;
          return window.getComputedStyle(container).alignItems === "center";
        },
      },
      {
        name: ".container c√≥ gap 20px",
        check: (doc) => {
          const container = doc.querySelector(".container");
          if (!container) return false;
          const gap = window.getComputedStyle(container).gap;
          return gap === "20px" || gap.includes("20px");
        },
      },
      {
        name: ".container c√≥ min-height 300px",
        check: (doc) => {
          const container = doc.querySelector(".container");
          if (!container) return false;
          return window.getComputedStyle(container).minHeight === "300px";
        },
      },
    ],
  },
];

function loadChallenge(index) {
  if (index < 0 || index >= challenges.length) {
    index = 0;
  }

  currentChallengeIndex = index;
  const challenge = challenges[currentChallengeIndex];

  document.querySelector(".header h2").textContent = `${
    currentChallengeIndex + 1
  }. ${challenge.title}`;
  document.getElementById("challenge").innerHTML = challenge.description;

  if (editor) {
    editor.setValue(challenge.starterCode);
    updatePreview();
  }
}

require.config({
  paths: {
    vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs",
  },
});

require(["vs/editor/editor.main"], () => {
  editor = monaco.editor.create(document.getElementById("editor"), {
    value: "/* CSS */\n",
    language: "css",
    theme: "vs-dark",
    fontSize: 16,
    minimap: { enabled: false },
    automaticLayout: true,
    autoClosingBrackets: "always",
    autoClosingQuotes: "always",
    autoIndent: "advanced",
  });

  editor.onDidChangeModelContent(() => {
    updatePreview();
  });

  loadChallenge(0);
});

function updatePreview() {
  const cssCode = editor.getValue();
  const challenge = challenges[currentChallengeIndex];
  const preview = document.getElementById("preview");
  const previewDoc = preview.contentDocument || preview.contentWindow.document;

  const fullHTML = `
        <!DOCTYPE html>
        <html>
        <head>
          <style>
            body { margin: 20px; font-family: Arial, sans-serif; }
            ${cssCode}
          </style>
        </head>
        <body>
          ${challenge.htmlContent}
        </body>
        </html>
      `;

  previewDoc.open();
  previewDoc.write(fullHTML);
  previewDoc.close();
}

function checkChallenge() {
  const preview = document.getElementById("preview");
  const previewDoc = preview.contentDocument || preview.contentWindow.document;

  const challenge = challenges[currentChallengeIndex];
  const results = challenge.requirements.map((req) => ({
    name: req.name,
    passed: req.check(previewDoc),
  }));

  const allPassed = results.every((r) => r.passed);
  showResult(allPassed, results);
}

function showResult(passed, results) {
  const overlay = document.getElementById("resultOverlay");
  const box = document.getElementById("resultBox");
  const icon = document.getElementById("resultIcon");
  const title = document.getElementById("resultTitle");
  const message = document.getElementById("resultMessage");
  const reqList = document.getElementById("requirementList");
  const nextBtn = document.getElementById("nextButton");

  if (passed) {
    box.classList.remove("failed");
    icon.textContent = "üéâ";
    title.textContent = "Ch√≠nh x√°c!";
    message.textContent = "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ho√†n th√†nh th·ª≠ th√°ch n√†y.";

    if (currentChallengeIndex < challenges.length - 1) {
      nextBtn.style.display = "inline-block";
    } else {
      message.textContent =
        "üéä Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ b√†i t·∫≠p CSS!";
      nextBtn.style.display = "none";
    }
  } else {
    box.classList.add("failed");
    icon.textContent = "‚ùå";
    title.textContent = "Ch∆∞a ƒë√∫ng!";
    message.textContent = "H√£y xem l·∫°i c√°c y√™u c·∫ßu b√™n d∆∞·ªõi:";
    nextBtn.style.display = "none";
  }

  reqList.innerHTML = results
    .map(
      (r) =>
        `<div class="requirement-item ${r.passed ? "pass" : "fail"}">
              ${r.passed ? "‚úì" : "‚úó"} ${r.name}
            </div>`
    )
    .join("");

  overlay.style.display = "flex";
}

function closeResult() {
  document.getElementById("resultOverlay").style.display = "none";
}

function nextChallenge() {
  closeResult();
  loadChallenge(currentChallengeIndex + 1);
}

setInterval(() => {
  if (editor) {
    updatePreview();
  }
}, 1000);
