require.config({
  paths: {
    vs: "https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs",
  },
});

let editor;
let currentChallengeIndex = 0;

// Database c√°c b√†i t·∫≠p
const challenges = [
  {
    id: "js-lesson-1",
    title: "Hello World",
    description: `
      <h3>Nhi·ªám v·ª•</h3>
      <p>Vi·∫øt m·ªôt h√†m <code>sayHello(name)</code> tr·∫£ v·ªÅ chu·ªói ch√†o m·ª´ng.</p>
      
      <div class="example-box">
        <strong>V√≠ d·ª•:</strong><br>
        sayHello("Minh") ‚Üí "Xin ch√†o, Minh!"<br>
        sayHello("An") ‚Üí "Xin ch√†o, An!"
      </div>
      
      <p>üí° <strong>G·ª£i √Ω:</strong> S·ª≠ d·ª•ng template string v·ªõi d·∫•u backtick \`\`.</p>
    `,
    starterCode: `function sayHello(name) {
  // Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y
  
}

// Test th·ª≠
console.log(sayHello("Minh"));
console.log(sayHello("An"));`,
    tests: [
      { input: "Minh", expected: "Xin ch√†o, Minh!" },
      { input: "An", expected: "Xin ch√†o, An!" },
      { input: "H√πng", expected: "Xin ch√†o, H√πng!" },
    ],
  },

  {
    id: "js-lesson-2",
    title: "T√≠nh t·ªïng m·∫£ng",
    description: `
      <h3>Nhi·ªám v·ª•</h3>
      <p>Vi·∫øt h√†m <code>sumArray(arr)</code> t√≠nh t·ªïng c√°c s·ªë trong m·∫£ng.</p>
      
      <div class="example-box">
        <strong>V√≠ d·ª•:</strong><br>
        sumArray([1, 2, 3]) ‚Üí 6<br>
        sumArray([10, 20, 30]) ‚Üí 60<br>
        sumArray([]) ‚Üí 0
      </div>
      
      <p>üí° <strong>G·ª£i √Ω:</strong> D√πng v√≤ng l·∫∑p for ho·∫∑c ph∆∞∆°ng th·ª©c reduce().</p>
    `,
    starterCode: `function sumArray(arr) {
  // Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y
  
}

// Test th·ª≠
console.log(sumArray([1, 2, 3]));
console.log(sumArray([10, 20, 30]));
console.log(sumArray([]));`,
    tests: [
      { input: [1, 2, 3], expected: 6 },
      { input: [10, 20, 30], expected: 60 },
      { input: [5], expected: 5 },
      { input: [], expected: 0 },
    ],
  },

  {
    id: "js-lesson-3",
    title: "ƒê·∫£o ng∆∞·ª£c chu·ªói",
    description: `
      <h3>Nhi·ªám v·ª•</h3>
      <p>Vi·∫øt h√†m <code>reverseString(str)</code> ƒë·∫£o ng∆∞·ª£c m·ªôt chu·ªói.</p>
      
      <div class="example-box">
        <strong>V√≠ d·ª•:</strong><br>
        reverseString("hello") ‚Üí "olleh"<br>
        reverseString("world") ‚Üí "dlrow"
      </div>
      
      <p>üí° <strong>G·ª£i √Ω:</strong> Chuy·ªÉn string th√†nh array r·ªìi d√πng reverse().</p>
    `,
    starterCode: `function reverseString(str) {
  // Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y
  
}

// Test th·ª≠
console.log(reverseString("hello"));
console.log(reverseString("world"));`,
    tests: [
      { input: "hello", expected: "olleh" },
      { input: "world", expected: "dlrow" },
      { input: "JavaScript", expected: "tpircSavaJ" },
    ],
  },

  {
    id: "js-lesson-4",
    title: "S·ªë ch·∫µn l·∫ª",
    description: `
      <h3>Nhi·ªám v·ª•</h3>
      <p>Vi·∫øt h√†m <code>isEven(num)</code> ki·ªÉm tra s·ªë ch·∫µn. Tr·∫£ v·ªÅ true n·∫øu ch·∫µn, false n·∫øu l·∫ª.</p>
      
      <div class="example-box">
        <strong>V√≠ d·ª•:</strong><br>
        isEven(4) ‚Üí true<br>
        isEven(7) ‚Üí false<br>
        isEven(0) ‚Üí true
      </div>
      
      <p>üí° <strong>G·ª£i √Ω:</strong> D√πng to√°n t·ª≠ % (chia l·∫•y d∆∞).</p>
    `,
    starterCode: `function isEven(num) {
  // Vi·∫øt code c·ªßa b·∫°n ·ªü ƒë√¢y
  
}

// Test th·ª≠
console.log(isEven(4));
console.log(isEven(7));
console.log(isEven(0));`,
    tests: [
      { input: 4, expected: true },
      { input: 7, expected: false },
      { input: 0, expected: true },
      { input: 100, expected: true },
      { input: 99, expected: false },
    ],
  },
];

function loadChallenge(index) {
  if (index < 0 || index >= challenges.length) {
    index = 0;
  }

  currentChallengeIndex = index;
  const challenge = challenges[currentChallengeIndex];

  document.querySelector(".header h2").textContent = `${
    currentChallengeIndex + 1
  }. ${challenge.title}`;
  document.getElementById("challenge").innerHTML = challenge.description;

  if (editor) {
    editor.setValue(challenge.starterCode);
  }

  // Clear output
  document.getElementById("output").innerHTML = "";
}

require(["vs/editor/editor.main"], function () {
  editor = monaco.editor.create(document.getElementById("editor"), {
    value: challenges[0].starterCode,
    language: "javascript",
    theme: "vs-dark",
    fontSize: 16,
    minimap: { enabled: false },
    scrollBeyondLastLine: false,
    automaticLayout: true,
    tabSize: 2,
  });

  loadChallenge(0);
});

function runCode() {
  const code = editor.getValue();
  const outputDiv = document.getElementById("output");
  outputDiv.innerHTML = "";

  // Capture console output
  const logs = [];
  const originalLog = console.log;
  const originalError = console.error;
  const originalWarn = console.warn;

  console.log = (...args) => {
    logs.push({ type: "log", content: args.map(formatOutput).join(" ") });
    originalLog.apply(console, args);
  };

  console.error = (...args) => {
    logs.push({ type: "error", content: args.map(formatOutput).join(" ") });
    originalError.apply(console, args);
  };

  console.warn = (...args) => {
    logs.push({ type: "warn", content: args.map(formatOutput).join(" ") });
    originalWarn.apply(console, args);
  };

  try {
    
    eval(code);

    
    if (logs.length > 0) {
      logs.forEach((log) => {
        const div = document.createElement("div");
        div.className = `output-item output-${log.type}`;
        div.textContent = log.content;
        outputDiv.appendChild(div);
      });
    }

    // Run tests
    runTests(code);
  } catch (error) {
    const errorDiv = document.createElement("div");
    errorDiv.className = "output-item output-error";
    errorDiv.textContent = `‚ùå L·ªói: ${error.message}`;
    outputDiv.appendChild(errorDiv);
  } finally {
    // Restore console
    console.log = originalLog;
    console.error = originalError;
    console.warn = originalWarn;
  }
}

function runTests(code) {
  const outputDiv = document.getElementById("output");
  const challenge = challenges[currentChallengeIndex];

  try {
    
    eval(code);

    const funcName = challenge.starterCode.match(/function\s+(\w+)/)?.[1];
    if (!funcName) return;

    const func = eval(funcName);
    if (typeof func !== "function") return;

    const testResults = challenge.tests.map((test, idx) => {
      try {
        const result = func(test.input);
        const passed = JSON.stringify(result) === JSON.stringify(test.expected);

        return {
          passed,
          input: test.input,
          expected: test.expected,
          actual: result,
          index: idx + 1,
        };
      } catch (e) {
        return {
          passed: false,
          error: e.message,
          index: idx + 1,
        };
      }
    });

    const passedCount = testResults.filter((r) => r.passed).length;
    const totalCount = testResults.length;
    const allPassed = passedCount === totalCount;

    // Display test results
    const testDiv = document.createElement("div");
    testDiv.className = `test-result ${
      allPassed ? "test-passed" : "test-failed"
    }`;

    if (allPassed) {
      testDiv.innerHTML = `
        <div>‚úÖ Ho√†n th√†nh! T·∫•t c·∫£ test cases ƒë√£ pass! (${passedCount}/${totalCount})</div>
        <div class="test-info">Tuy·ªát v·ªùi! B·∫°n ƒë√£ gi·∫£i quy·∫øt th·ª≠ th√°ch n√†y.</div>
      `;
      const lessonId = challenges[currentChallengeIndex].id;
      saveLessonProgress(lessonId);


      if (currentChallengeIndex < challenges.length - 1) {
        const nextBtn = document.createElement("button");
        nextBtn.className = "next-button";
        nextBtn.textContent = "‚ûú B√†i ti·∫øp theo";
        nextBtn.onclick = () => {
          loadChallenge(currentChallengeIndex + 1);
        };
        testDiv.appendChild(nextBtn);
      } else {
        const completeMsg = document.createElement("div");
        completeMsg.className = "test-info";
        completeMsg.style.marginTop = "10px";
        completeMsg.style.color = "#4ec9b0";
        completeMsg.innerHTML =
          "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ b√†i t·∫≠p!";
        testDiv.appendChild(completeMsg);
      }
    } else {
      testDiv.innerHTML = `
        <div>‚ö†Ô∏è Test Cases: ${passedCount}/${totalCount} passed</div>
        <div class="test-info">
          ${testResults
            .map((r) => {
              if (r.passed) {
                return `<span style="color: #4ec9b0;">‚úÖ Test ${r.index}: Pass</span>`;
              } else if (r.error) {
                return `<span style="color: #f48771;">‚ùå Test ${r.index}: Error - ${r.error}</span>`;
              } else {
                return `<span style="color: #f48771;">‚ùå Test ${
                  r.index
                }: Fail</span><br>
                        &nbsp;&nbsp;&nbsp;Expected: ${JSON.stringify(
                          r.expected
                        )}<br>
                        &nbsp;&nbsp;&nbsp;Got: ${JSON.stringify(r.actual)}`;
              }
            })
            .join("<br>")}
        </div>
      `;
    }

    outputDiv.appendChild(testDiv);
  } catch (e) {
    
  }
}

function formatOutput(value) {
  if (typeof value === "object" && value !== null) {
    try {
      return JSON.stringify(value, null, 2);
    } catch {
      return String(value);
    }
  }
  return String(value);
}

// Keyboard shortcut: Ctrl/Cmd + Enter to run
document.addEventListener("keydown", (e) => {
  if ((e.ctrlKey || e.metaKey) && e.key === "Enter") {
    e.preventDefault();
    runCode();
  }
});
